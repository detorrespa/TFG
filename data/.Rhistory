install.packages("reticulate")
install.packages("Robyn")
install.packages("reticulate")
## Install, load, and check (latest) Robyn version, using one of these 2 sources:
## A) Install the latest stable version from CRAN:
# install.packages("Robyn")
## B) Install the latest dev version from GitHub:
# install.packages("remotes") # Install remotes first if you haven't already
# remotes::install_github("facebookexperimental/Robyn/R")
library(Robyn)
## Force multi-core use when running RStudio
Sys.setenv(R_FUTURE_FORK_ENABLE = "true")
options(future.fork.enable = TRUE)
# Set to FALSE to avoid the creation of files locally
create_files <- TRUE
setwd("C:/Users/alber/OneDrive - Nektiu S.L/UOC/TFG/data")
library(readr)
MMM_data <- read_csv("MMM_data.csv")
View(MMM_data)
View(MMM_data)
## Check holidays from Prophet
# 59 countries included. If your country is not included, please manually add it.
# Tipp: any events can be added into this table, school break, events etc.
data("dt_prophet_holidays")
head(dt_prophet_holidays)
# Directory where you want to export results to (will create new folders)
robyn_object <- "~/Desktop"
InputCollect <- robyn_inputs(
dt_input = dt_simulated_weekly,
dt_holidays = dt_prophet_holidays,
date_var = "DATE", # date format must be "2020-01-01"
dep_var = "revenue", # there should be only one dependent variable
dep_var_type = "revenue", # "revenue" (ROI) or "conversion" (CPA)
prophet_vars = c("trend", "season", "holiday"), # "trend","season", "weekday" & "holiday"
prophet_country = "DE", # input one country. dt_prophet_holidays includes 59 countries by default
context_vars = c("competitor_sales_B", "events"), # e.g. competitors, discount, unemployment etc
paid_media_spends = c("tv_S", "ooh_S", "print_S", "facebook_S", "search_S"), # mandatory input
paid_media_vars = c("tv_S", "ooh_S", "print_S", "facebook_I", "search_clicks_P"), # mandatory.
# paid_media_vars must have same order as paid_media_spends. Use media exposure metrics like
# impressions, GRP etc. If not applicable, use spend instead.
organic_vars = "newsletter", # marketing activity without media spend
# factor_vars = c("events"), # force variables in context_vars or organic_vars to be categorical
window_start = "2016-01-01",
window_end = "2018-12-31",
adstock = "geometric" # geometric, weibull_cdf or weibull_pdf.
)
View(dt_prophet_holidays)
View(dt_prophet_holidays)
View(dt_prophet_holidays)
InputCollect <- robyn_inputs(
dt_input = dt_simulated_weekly,
dt_holidays = dt_prophet_holidays,
date_var = "wk_strt_dt", # date format must be "2020-01-01"
dep_var = "sales", # there should be only one dependent variable
dep_var_type = "sales", # "revenue" (ROI) or "conversion" (CPA)
prophet_vars = c("seas_prd_1",'seas_prd_2','seas_prd_3','seas_prd_4','seas_prd_5','seas_prd_6','seas_prd_7','seas_prd_8','seas_prd_9','seas_prd_10','seas_prd_11','seas_prd_12','seas_prd_40','seas_prd_41','seas_prd_42','seas_prd_43','seas_prd_44','seas_prd_45','seas_prd_46','seas_prd_47','seas_prd_48', "hldy_Black Friday",'hldy_Christmas Day','hldy_Christmas Eve','hldy_Columbus Day','hldy_Cyber Monday','hldy_Day after Christmas','hldy_Easter', "hldy_Father's Day", 'hldy_Green Monday','hldy_July 4th','hldy_Labor Day', 'hldy_MLK', 'hldy_Memorial Day', "hldy_Mother's Day", 'hldy_NYE', "hldy_New Year's Day", 'hldy_Pre Thanksgiving', 'hldy_Presidents Day', 'hldy_Prime Day', 'hldy_Thanksgiving', "hldy_Valentine's Day", 'hldy_Veterans Day'), # "trend","season", "weekday" & "holiday"
prophet_country = "US", # input one country. dt_prophet_holidays includes 59 countries by default
context_vars = c("mrkdn_valadd_edw", "mrkdn_pdm", 'me_ics_all','me_gas_dpg'), # e.g. competitors, discount, unemployment etc
paid_media_spends = c("mdsp_dm", "mdsp_inst", "mdsp_nsp", "mdsp_auddig", "mdsp_audtr", 'mdsp_vidtr','mdsp_viddig', 'mdsp_so', 'mdsp_on', 'mdsp_sem'), # mandatory input
paid_media_vars = c("mdip_dm", "mdip_inst", "mdip_nsp", "mdip_auddig", "mdip_audtr", 'mdip_vidtr', 'mdip_viddig', 'mdip_so', 'mdip_on', 'mdip_sem'), # mandatory.
# paid_media_vars must have same order as paid_media_spends. Use media exposure metrics like
# impressions, GRP etc. If not applicable, use spend instead.
organic_vars = c("mdip_em", 'mdip_sms', 'mdip_aff'), # marketing activity without media spend
# factor_vars = c("events"), # force variables in context_vars or organic_vars to be categorical
window_start = "2014-08-03",
window_end = "2018-07-29",
adstock = "geometric" # geometric, weibull_cdf or weibull_pdf.
)
View(InputCollect)
InputCollect1 <- robyn_inputs(
dt_input = dt_simulated_weekly,
dt_holidays = dt_prophet_holidays,
date_var = "wk_strt_dt", # date format must be "2020-01-01"
dep_var = "sales", # there should be only one dependent variable
dep_var_type = "sales", # "revenue" (ROI) or "conversion" (CPA)
prophet_vars = c("seas_prd_1",'seas_prd_2','seas_prd_3','seas_prd_4','seas_prd_5','seas_prd_6','seas_prd_7','seas_prd_8','seas_prd_9','seas_prd_10','seas_prd_11','seas_prd_12','seas_prd_40','seas_prd_41','seas_prd_42','seas_prd_43','seas_prd_44','seas_prd_45','seas_prd_46','seas_prd_47','seas_prd_48', "hldy_Black Friday",'hldy_Christmas Day','hldy_Christmas Eve','hldy_Columbus Day','hldy_Cyber Monday','hldy_Day after Christmas','hldy_Easter', "hldy_Father's Day", 'hldy_Green Monday','hldy_July 4th','hldy_Labor Day', 'hldy_MLK', 'hldy_Memorial Day', "hldy_Mother's Day", 'hldy_NYE', "hldy_New Year's Day", 'hldy_Pre Thanksgiving', 'hldy_Presidents Day', 'hldy_Prime Day', 'hldy_Thanksgiving', "hldy_Valentine's Day", 'hldy_Veterans Day'), # "trend","season", "weekday" & "holiday"
prophet_country = "US", # input one country. dt_prophet_holidays includes 59 countries by default
context_vars = c("mrkdn_valadd_edw", "mrkdn_pdm", 'me_ics_all','me_gas_dpg'), # e.g. competitors, discount, unemployment etc
paid_media_spends = c("mdsp_dm", "mdsp_inst", "mdsp_nsp", "mdsp_auddig", "mdsp_audtr", 'mdsp_vidtr','mdsp_viddig', 'mdsp_so', 'mdsp_on', 'mdsp_sem'), # mandatory input
paid_media_vars = c("mdip_dm", "mdip_inst", "mdip_nsp", "mdip_auddig", "mdip_audtr", 'mdip_vidtr', 'mdip_viddig', 'mdip_so', 'mdip_on', 'mdip_sem'), # mandatory.
# paid_media_vars must have same order as paid_media_spends. Use media exposure metrics like
# impressions, GRP etc. If not applicable, use spend instead.
organic_vars = c("mdip_em", 'mdip_sms', 'mdip_aff'), # marketing activity without media spend
# factor_vars = c("events"), # force variables in context_vars or organic_vars to be categorical
window_start = "2014-08-03",
window_end = "2018-07-29",
adstock = "geometric" # geometric, weibull_cdf or weibull_pdf.
)
View(InputCollect)
InputCollect <- robyn_inputs(
dt_input = dt_simulated_weekly,
dt_holidays = dt_prophet_holidays,
date_var = "wk_strt_dt", # date format must be "2020-01-01"
dep_var = "sales", # there should be only one dependent variable
dep_var_type = "sales", # "revenue" (ROI) or "conversion" (CPA)
prophet_vars = c("seas_prd_1",'seas_prd_2','seas_prd_3','seas_prd_4','seas_prd_5','seas_prd_6','seas_prd_7','seas_prd_8','seas_prd_9','seas_prd_10','seas_prd_11','seas_prd_12','seas_prd_40','seas_prd_41','seas_prd_42','seas_prd_43','seas_prd_44','seas_prd_45','seas_prd_46','seas_prd_47','seas_prd_48', "hldy_Black Friday",'hldy_Christmas Day','hldy_Christmas Eve','hldy_Columbus Day','hldy_Cyber Monday','hldy_Day after Christmas','hldy_Easter', "hldy_Father's Day", 'hldy_Green Monday','hldy_July 4th','hldy_Labor Day', 'hldy_MLK', 'hldy_Memorial Day', "hldy_Mother's Day", 'hldy_NYE', "hldy_New Year's Day", 'hldy_Pre Thanksgiving', 'hldy_Presidents Day', 'hldy_Prime Day', 'hldy_Thanksgiving', "hldy_Valentine's Day", 'hldy_Veterans Day'), # "trend","season", "weekday" & "holiday"
prophet_country = "US", # input one country. dt_prophet_holidays includes 59 countries by default
context_vars = c("mrkdn_valadd_edw", "mrkdn_pdm", 'me_ics_all','me_gas_dpg'), # e.g. competitors, discount, unemployment etc
paid_media_spends = c("mdsp_dm", "mdsp_inst", "mdsp_nsp", "mdsp_auddig", "mdsp_audtr", 'mdsp_vidtr','mdsp_viddig', 'mdsp_so', 'mdsp_on', 'mdsp_sem'), # mandatory input
paid_media_vars = c("mdip_dm", "mdip_inst", "mdip_nsp", "mdip_auddig", "mdip_audtr", 'mdip_vidtr', 'mdip_viddig', 'mdip_so', 'mdip_on', 'mdip_sem'), # mandatory.
# paid_media_vars must have same order as paid_media_spends. Use media exposure metrics like
# impressions, GRP etc. If not applicable, use spend instead.
organic_vars = c("mdip_em", 'mdip_sms', 'mdip_aff'), # marketing activity without media spend
# factor_vars = c("events"), # force variables in context_vars or organic_vars to be categorical
window_start = "2014-08-03",
window_end = "2018-07-29",
adstock = "geometric" # geometric, weibull_cdf or weibull_pdf.
)
InputCollect <- robyn_inputs(
dt_input = dt_simulated_weekly,
dt_holidays = dt_prophet_holidays,
date_var = "wk_strt_dt", # date format must be "2020-01-01"
dep_var = "sales", # there should be only one dependent variable
dep_var_type = "sales", # "revenue" (ROI) or "conversion" (CPA)
prophet_vars = c("seas_prd_1",'seas_prd_2','seas_prd_3','seas_prd_4','seas_prd_5','seas_prd_6','seas_prd_7','seas_prd_8','seas_prd_9','seas_prd_10','seas_prd_11','seas_prd_12','seas_prd_40','seas_prd_41','seas_prd_42','seas_prd_43','seas_prd_44','seas_prd_45','seas_prd_46','seas_prd_47','seas_prd_48', "hldy_Black Friday",'hldy_Christmas Day','hldy_Christmas Eve','hldy_Columbus Day','hldy_Cyber Monday','hldy_Day after Christmas','hldy_Easter', "hldy_Father's Day", 'hldy_Green Monday','hldy_July 4th','hldy_Labor Day', 'hldy_MLK', 'hldy_Memorial Day', "hldy_Mother's Day", 'hldy_NYE', "hldy_New Year's Day", 'hldy_Pre Thanksgiving', 'hldy_Presidents Day', 'hldy_Prime Day', 'hldy_Thanksgiving', "hldy_Valentine's Day", 'hldy_Veterans Day'), # "trend","season", "weekday" & "holiday"
prophet_country = "US", # input one country. dt_prophet_holidays includes 59 countries by default
context_vars = c("mrkdn_valadd_edw", "mrkdn_pdm", 'me_ics_all','me_gas_dpg'), # e.g. competitors, discount, unemployment etc
paid_media_spends = c("mdsp_dm", "mdsp_inst", "mdsp_nsp", "mdsp_auddig", "mdsp_audtr", 'mdsp_vidtr','mdsp_viddig', 'mdsp_so', 'mdsp_on', 'mdsp_sem'), # mandatory input
paid_media_vars = c("mdip_dm", "mdip_inst", "mdip_nsp", "mdip_auddig", "mdip_audtr", 'mdip_vidtr', 'mdip_viddig', 'mdip_so', 'mdip_on', 'mdip_sem'), # mandatory.
# paid_media_vars must have same order as paid_media_spends. Use media exposure metrics like
# impressions, GRP etc. If not applicable, use spend instead.
organic_vars = c("mdip_em", 'mdip_sms', 'mdip_aff'), # marketing activity without media spend
# factor_vars = c("events"), # force variables in context_vars or organic_vars to be categorical
window_start = "2014-08-03",
window_end = "2018-07-29",
adstock = "geometric" # geometric, weibull_cdf or weibull_pdf.
)
# Convert the variable to a date format
df <- MMM_data%>%
mutate(date = as.Date(wk_strt_dt, format = "%Y-%m-%d"))
# Convert the variable to a date format
df <- MMM_data % >%
mutate(date = as.Date(wk_strt_dt, format = "%Y-%m-%d"))
# Convert the variable to a date format
library(dplyr)
df <- MMM_data % >%
mutate(date = as.Date(wk_strt_dt, format = "%Y-%m-%d"))
install.packages("dplyr")
## Install, load, and check (latest) Robyn version, using one of these 2 sources:
## A) Install the latest stable version from CRAN:
# install.packages("Robyn")
## B) Install the latest dev version from GitHub:
# install.packages("remotes") # Install remotes first if you haven't already
# remotes::install_github("facebookexperimental/Robyn/R")
library(Robyn)
# Please, check if you have installed the latest version before running this demo. Update if not
# https://github.com/facebookexperimental/Robyn/blob/main/R/DESCRIPTION#L4
packageVersion("Robyn")
## Force multi-core use when running RStudio
Sys.setenv(R_FUTURE_FORK_ENABLE = "true")
options(future.fork.enable = TRUE)
# Set to FALSE to avoid the creation of files locally
create_files <- TRUE
library(readr)
MMM_data <- read_csv("MMM_data.csv")
View(MMM_data)
# Convert the variable to a date format
library(dplyr)
df <- MMM_data % >%
mutate(date = as.Date(wk_strt_dt, format = "%Y-%m-%d"))
df <- MMM_data % >% mutate(date = as.Date(wk_strt_dt, format = "%Y-%m-%d"))
df <- MMM_data %>% mutate(date = as.Date(wk_strt_dt, format = "%Y-%m-%d"))
View(df)
InputCollect <- robyn_inputs(
dt_input = df,
dt_holidays = dt_prophet_holidays,
date_var = "wk_strt_dt", # date format must be "2020-01-01"
dep_var = "sales", # there should be only one dependent variable
dep_var_type = "sales", # "revenue" (ROI) or "conversion" (CPA)
prophet_vars = c("seas_prd_1",'seas_prd_2','seas_prd_3','seas_prd_4','seas_prd_5','seas_prd_6','seas_prd_7','seas_prd_8','seas_prd_9','seas_prd_10','seas_prd_11','seas_prd_12','seas_prd_40','seas_prd_41','seas_prd_42','seas_prd_43','seas_prd_44','seas_prd_45','seas_prd_46','seas_prd_47','seas_prd_48', "hldy_Black Friday",'hldy_Christmas Day','hldy_Christmas Eve','hldy_Columbus Day','hldy_Cyber Monday','hldy_Day after Christmas','hldy_Easter', "hldy_Father's Day", 'hldy_Green Monday','hldy_July 4th','hldy_Labor Day', 'hldy_MLK', 'hldy_Memorial Day', "hldy_Mother's Day", 'hldy_NYE', "hldy_New Year's Day", 'hldy_Pre Thanksgiving', 'hldy_Presidents Day', 'hldy_Prime Day', 'hldy_Thanksgiving', "hldy_Valentine's Day", 'hldy_Veterans Day'), # "trend","season", "weekday" & "holiday"
prophet_country = "US", # input one country. dt_prophet_holidays includes 59 countries by default
context_vars = c("mrkdn_valadd_edw", "mrkdn_pdm", 'me_ics_all','me_gas_dpg'), # e.g. competitors, discount, unemployment etc
paid_media_spends = c("mdsp_dm", "mdsp_inst", "mdsp_nsp", "mdsp_auddig", "mdsp_audtr", 'mdsp_vidtr','mdsp_viddig', 'mdsp_so', 'mdsp_on', 'mdsp_sem'), # mandatory input
paid_media_vars = c("mdip_dm", "mdip_inst", "mdip_nsp", "mdip_auddig", "mdip_audtr", 'mdip_vidtr', 'mdip_viddig', 'mdip_so', 'mdip_on', 'mdip_sem'), # mandatory.
# paid_media_vars must have same order as paid_media_spends. Use media exposure metrics like
# impressions, GRP etc. If not applicable, use spend instead.
organic_vars = c("mdip_em", 'mdip_sms', 'mdip_aff'), # marketing activity without media spend
# factor_vars = c("events"), # force variables in context_vars or organic_vars to be categorical
window_start = "2014-08-03",
window_end = "2018-07-29",
adstock = "geometric" # geometric, weibull_cdf or weibull_pdf.
)
InputCollect <- robyn_inputs(
dt_input = df,
dt_holidays = dt_prophet_holidays,
date_var = "wk_strt_dt", # date format must be "2020-01-01"
dep_var = "sales", # there should be only one dependent variable
dep_var_type = "revenue", # "revenue" (ROI) or "conversion" (CPA)
prophet_vars = c("seas_prd_1",'seas_prd_2','seas_prd_3','seas_prd_4','seas_prd_5','seas_prd_6','seas_prd_7','seas_prd_8','seas_prd_9','seas_prd_10','seas_prd_11','seas_prd_12','seas_prd_40','seas_prd_41','seas_prd_42','seas_prd_43','seas_prd_44','seas_prd_45','seas_prd_46','seas_prd_47','seas_prd_48', "hldy_Black Friday",'hldy_Christmas Day','hldy_Christmas Eve','hldy_Columbus Day','hldy_Cyber Monday','hldy_Day after Christmas','hldy_Easter', "hldy_Father's Day", 'hldy_Green Monday','hldy_July 4th','hldy_Labor Day', 'hldy_MLK', 'hldy_Memorial Day', "hldy_Mother's Day", 'hldy_NYE', "hldy_New Year's Day", 'hldy_Pre Thanksgiving', 'hldy_Presidents Day', 'hldy_Prime Day', 'hldy_Thanksgiving', "hldy_Valentine's Day", 'hldy_Veterans Day'), # "trend","season", "weekday" & "holiday"
prophet_country = "US", # input one country. dt_prophet_holidays includes 59 countries by default
context_vars = c("mrkdn_valadd_edw", "mrkdn_pdm", 'me_ics_all','me_gas_dpg'), # e.g. competitors, discount, unemployment etc
paid_media_spends = c("mdsp_dm", "mdsp_inst", "mdsp_nsp", "mdsp_auddig", "mdsp_audtr", 'mdsp_vidtr','mdsp_viddig', 'mdsp_so', 'mdsp_on', 'mdsp_sem'), # mandatory input
paid_media_vars = c("mdip_dm", "mdip_inst", "mdip_nsp", "mdip_auddig", "mdip_audtr", 'mdip_vidtr', 'mdip_viddig', 'mdip_so', 'mdip_on', 'mdip_sem'), # mandatory.
# paid_media_vars must have same order as paid_media_spends. Use media exposure metrics like
# impressions, GRP etc. If not applicable, use spend instead.
organic_vars = c("mdip_em", 'mdip_sms', 'mdip_aff'), # marketing activity without media spend
# factor_vars = c("events"), # force variables in context_vars or organic_vars to be categorical
window_start = "2014-08-03",
window_end = "2018-07-29",
adstock = "geometric" # geometric, weibull_cdf or weibull_pdf.
)
View(InputCollect)
print(InputCollect)
